package ph.url.brazer.alldoors.app_v1;import android.annotation.TargetApi;import android.app.Activity;import android.app.AlertDialog;import android.os.Build;import android.os.Bundle;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentPagerAdapter;import android.support.v4.app.FragmentTransaction;import android.support.v4.view.ViewPager;import android.support.v7.app.ActionBar;import android.support.v7.app.ActionBarActivity;import android.util.Log;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.AbsListView;import android.widget.Button;import android.widget.EditText;import android.widget.ListView;import android.widget.RadioButton;import android.widget.Toast;import java.util.ArrayList;import java.util.Locale;import java.util.concurrent.ExecutionException;@TargetApi(Build.VERSION_CODES.HONEYCOMB)public class MainActivity extends ActionBarActivity implements ActionBar.TabListener {    /**     * The {@link android.support.v4.view.PagerAdapter} that will provide     * fragments for each of the sections. We use a     * {@link FragmentPagerAdapter} derivative, which will keep every     * loaded fragment in memory. If this becomes too memory intensive, it     * may be best to switch to a     * {@link android.support.v4.app.FragmentStatePagerAdapter}.     */    static SectionsPagerAdapter mSectionsPagerAdapter;    /**     * The {@link ViewPager} that will host the section contents.     */    ViewPager mViewPager;    LoginDialog loginDialog;    private static Activity activity;    protected static android.app.FragmentManager manager;    static final String SITE_URL = "http://brazer.url.ph/all_doors/";    static PlaceholderFragment.Clients clients;    static PlaceholderFragment.Doors doors;    @Override    protected void onSaveInstanceState(Bundle outState) {        super.onSaveInstanceState(outState);        outState.putBoolean("isNotLogin", false);    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        loginAttempt(savedInstanceState);        activity = this;        manager = getFragmentManager();        // Set up the action bar.        final ActionBar actionBar = getSupportActionBar();        actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);        // Create the adapter that will return a fragment for each of the three        // primary sections of the activity.        mSectionsPagerAdapter = new SectionsPagerAdapter(getSupportFragmentManager());        // Set up the ViewPager with the sections adapter.        mViewPager = (ViewPager) findViewById(R.id.pager);        mViewPager.setAdapter(mSectionsPagerAdapter);        // When swiping between different sections, select the corresponding        // tab. We can also use ActionBar.Tab#select() to do this if we have        // a reference to the Tab.        mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {            @Override            public void onPageSelected(int position) {                actionBar.setSelectedNavigationItem(position);            }        });        // For each of the sections in the app, add a tab to the action bar.        for (int i = 0; i < mSectionsPagerAdapter.getCount(); i++) {            // Create a tab with text corresponding to the page title defined by            // the adapter. Also specify this Activity object, which implements            // the TabListener interface, as the callback (listener) for when            // this tab is selected.            actionBar.addTab(                    actionBar.newTab()                            .setText(mSectionsPagerAdapter.getPageTitle(i))                            .setTabListener(this));        }    }    private void loginAttempt(Bundle state) {        boolean isNotLogin = true;        if (state!=null)            isNotLogin = state.getBoolean("isNotLogin");        if (isNotLogin) {            loginDialog = new LoginDialog();            loginDialog.show(getFragmentManager(), null);        }    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.main, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        // Handle action bar item clicks here. The action bar will        // automatically handle clicks on the Home/Up button, so long        // as you specify a parent activity in AndroidManifest.xml.        int id = item.getItemId();        if (id == R.id.action_settings) {            return true;        }        return super.onOptionsItemSelected(item);    }    @Override    public void onTabSelected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {        // When the given tab is selected, switch to the corresponding page in        // the ViewPager.        mViewPager.setCurrentItem(tab.getPosition());    }    @Override    public void onTabUnselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {    }    @Override    public void onTabReselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {    }    private void MsBox(String str, String str2)    {        AlertDialog.Builder dlgAlert  = new AlertDialog.Builder(this);        dlgAlert.setMessage(str2);        dlgAlert.setTitle(str);        dlgAlert.setPositiveButton("OK", null);        dlgAlert.setCancelable(true);        dlgAlert.create().show();        finish();    }    /**     * A {@link FragmentPagerAdapter} that returns a fragment corresponding to     * one of the sections/tabs/pages.     */    public class SectionsPagerAdapter extends FragmentPagerAdapter {        public SectionsPagerAdapter(FragmentManager fm) {            super(fm);        }        @Override        public Fragment getItem(int position) {            // getItem is called to instantiate the fragment for the given page.            // Return a PlaceholderFragment (defined as a static inner class below).            return PlaceholderFragment.newInstance(position + 1);        }        @Override        public int getCount() {            // Show 3 total pages.            return 3;        }        @Override        public CharSequence getPageTitle(int position) {            Locale l = Locale.getDefault();            switch (position) {                case 0:                    return getString(R.string.title_section1).toUpperCase(l);                case 1:                    return getString(R.string.title_section2).toUpperCase(l);                case 2:                    return getString(R.string.title_section3).toUpperCase(l);            }            return null;        }    }    /**     * A placeholder fragment containing a simple view.     */    public static class PlaceholderFragment extends Fragment {        /**         * The fragment argument representing the section number for this         * fragment.         */        private static final String ARG_SECTION_NUMBER = "section_number";        private static boolean isClientAdded = false;        /**         * Returns a new instance of this fragment for the given section         * number.         */        public static PlaceholderFragment newInstance(int sectionNumber) {            PlaceholderFragment fragment = new PlaceholderFragment();            Bundle args = new Bundle();            args.putInt(ARG_SECTION_NUMBER, sectionNumber);            fragment.setArguments(args);            return fragment;        }        public PlaceholderFragment() {            if (clients==null) clients = new Clients();            if (doors==null) doors = new Doors();        }        @Override        public View onCreateView(LayoutInflater inflater, ViewGroup container,                Bundle savedInstanceState) {            int section = getArguments().getInt(ARG_SECTION_NUMBER);            View rootView = null;            switch (section) {                case 1:                    rootView = clients.getViewClients(inflater, container);                    break;                case 2:                    rootView = getViewToAddClient(inflater, container);                    break;                case 3:                    rootView = doors.getViewDoors(inflater, container);            }            return rootView;        }        private View getViewToAddClient(LayoutInflater inflater, ViewGroup container) {            final View rootView = inflater.inflate(R.layout.fragment_add_client, container, false);            final EditText firstName = (EditText) rootView.findViewById(R.id.editTextFirstName);            final EditText secondName = (EditText) rootView.findViewById(R.id.editTextSecondName);            final EditText middleName = (EditText) rootView.findViewById(R.id.editTextMiddleName);            final EditText phone = (EditText) rootView.findViewById(R.id.editTextPhone);            final EditText mobile = (EditText) rootView.findViewById(R.id.editTextMobile);            final EditText email = (EditText) rootView.findViewById(R.id.editTextEmail);            final EditText city = (EditText) rootView.findViewById(R.id.editTextCity);            final EditText street = (EditText) rootView.findViewById(R.id.editTextStreet);            final EditText house = (EditText) rootView.findViewById(R.id.editTextBuilding);            final EditText flat = (EditText) rootView.findViewById(R.id.editTextFlat);            final EditText date = (EditText) rootView.findViewById(R.id.editTextDate);            Button button = (Button) rootView.findViewById(R.id.btnAdd);            button.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    String resContact = insertContact();                    if (resContact.equals("Fault")) {                        show("Контакты обновить не удалось");                        return;                    } else                        show("Контакты обновлены");                    String resAddress = insertAddress();                    if (resAddress.equals("Fault")) {                        show("Адреса обновить не удалось");                        return;                    } else                        show("Адреса обновлены");                    String result = insertClient(resContact, resAddress);                    if (result.equals("Fault"))                        show("Клиента добавить не удалось");                    else {                        show("Клиент добавлен");                        isClientAdded = true;                    }                }                private String insertContact() {                    JSONResult.Parameter params[] = new JSONResult.Parameter[6];                    for (int i=0; i<params.length; i++)                        params[i] = new JSONResult.Parameter();                    params[0].name = "FirstName";                    params[0].value = firstName.getText().toString();                    params[1].name = "SecondName";                    params[1].value = secondName.getText().toString();                    params[2].name = "MiddleName";                    params[2].value = middleName.getText().toString();                    params[3].name = "Phone";                    params[3].value = phone.getText().toString();                    params[4].name = "Email";                    params[4].value = email.getText().toString();                    params[5].name = "Mobile";                    params[5].value = mobile.getText().toString();                    return submit(params, MainActivity.SITE_URL+"insertContact.php");                }                private String insertAddress() {                    JSONResult.Parameter params[] = new JSONResult.Parameter[4];                    for (int i=0; i<params.length; i++)                        params[i] = new JSONResult.Parameter();                    params[0].name = "City";                    params[0].value = city.getText().toString();                    params[1].name = "Street";                    params[1].value = street.getText().toString();                    params[2].name = "House";                    params[2].value = house.getText().toString();                    params[3].name = "Flat";                    params[3].value = flat.getText().toString();                    return submit(params, MainActivity.SITE_URL+"insertAddress.php");                }                private String insertClient(String contact, String address) {                    JSONResult.Parameter params[] = new JSONResult.Parameter[3];                    for (int i=0; i<params.length; i++)                        params[i] = new JSONResult.Parameter();                    params[0].name = "contact";                    params[0].value = contact;                    params[1].name = "address";                    params[1].value = address;                    // TODO: insert date in order                    params[2].name = "Date";                    params[2].value = date.getText().toString();                    return submit(params, MainActivity.SITE_URL+"insertClient.php");                }            });            return rootView;        }        private String submit(JSONResult.Parameter params[], String url) {            UrlTask task = new UrlTask();            JSONResult.Parameter.setUrl(url);            task.execute(params);            String res = "";            try {                res = task.get();            } catch (InterruptedException e) {                e.printStackTrace();            } catch (ExecutionException e) {                e.printStackTrace();            }            return res;        }        private void show(String message) {            Toast.makeText(activity.getApplication().getApplicationContext(),                    message,                    Toast.LENGTH_SHORT).show();        }        class Clients {            ListView mListView;            ArrayList<Item> mClients;            SingleSelectionAdapter<Item> mAdapter;            RadioButton curButton;            private View getViewClients(LayoutInflater inflater, ViewGroup container) {                View rootView = inflater.inflate(R.layout.fragment_clients, container, false);                mListView = (ListView) rootView.findViewById(android.R.id.list);                mListView.setChoiceMode(AbsListView.CHOICE_MODE_SINGLE);                init();                return rootView;            }            private void init() {                if (mClients==null | isClientAdded) {                    mClients = getList();                    isClientAdded = false;                }                mAdapter = new SingleSelectionAdapter<Item>(activity, mClients, clients.mAdapter);                mAdapter.setFragmentManager(manager);                mListView.setAdapter(mAdapter);            }            private ArrayList<Item> getList() {                UrlTask task = new UrlTask();                JSONResult.Parameter.setUrl(SITE_URL+"getClients.php");                task.execute();                String res = "";                try {                    res = task.get();                } catch (InterruptedException e) {                    e.printStackTrace();                } catch (ExecutionException e) {                    e.printStackTrace();                }                Log.i("Result", res);                ArrayList<String> ids, first, second, middle;                ids = task.getList("IdClient");                first = task.getList("FirstName");                second = task.getList("SecondName");                middle = task.getList("MiddleName");                ArrayList<Item> list = new ArrayList<Item>();                for (int i=0; i<first.size(); i++)                    list.add(new Item(first.get(i)+" "+middle.get(i)+" "+second.get(i), ids.get(i)));                return list;            }        }        class Doors implements View.OnClickListener {            ListView mListView;            Button btnShowCheckedItems;            ArrayList<Item> mProducts;            MultiSelectionAdapter mAdapter;            private View getViewDoors(LayoutInflater inflater, ViewGroup container) {                View rootView = inflater.inflate(R.layout.fragment_products, container, false);                mListView = (ListView) rootView.findViewById(android.R.id.list);                btnShowCheckedItems = (Button) rootView.findViewById(R.id.btnShowCheckedItems);                init();                addListeners();                return rootView;            }            private void init() {                if (mProducts==null) mProducts = getList();                mAdapter = new MultiSelectionAdapter<Item>(activity, mProducts, doors.mAdapter);                mAdapter.setFragmentManager(manager);                mListView.setAdapter(mAdapter);            }            private ArrayList<Item> getList() {                UrlTask task = new UrlTask();                JSONResult.Parameter.setUrl(SITE_URL+"getDoors.php");                task.execute();                String res = "";                try {                    res = task.get();                } catch (InterruptedException e) {                    e.printStackTrace();                } catch (ExecutionException e) {                    e.printStackTrace();                }                Log.i("Result", res);                ArrayList<String> names, prices, ids;                names = task.getList("ProductName");                prices = task.getList("Price");                ids = task.getList("IdProductItem");                ArrayList<Item> list = new ArrayList<Item>();                for (int i=0; i<names.size(); i++) {                    Double p = Double.valueOf(prices.get(i));                    //list.add(new Item(names.get(i)+" - "+Math.round(p)+" у.е.", ids.get(i)));                    list.add(new Item(names.get(i), ids.get(i), p));                }                return list;            }            private void addListeners() {                btnShowCheckedItems.setOnClickListener(this);            }            @Override            public void onClick(View v) {                if (mAdapter != null) {                    String client = getClient();                    if (client=="") {                        Toast.makeText(activity.getApplication().getApplicationContext(),                                "Выберите клиента", Toast.LENGTH_SHORT).show();                    } else {                        ArrayList<Item> mArrayProducts = mAdapter.getCheckedItems();                        if (mArrayProducts.size()==0)                            Toast.makeText(activity.getApplication().getApplicationContext(),                                    "Выберите товар(ы)", Toast.LENGTH_SHORT).show();                        else formOrder();                    }                }            }            private String getClient() {                String s = "";                if (clients.curButton!=null)                    s = clients.curButton.getText().toString();                return s;            }            private void formOrder() { //TODO                ClientRoot client = TreeOrder.getRoot();                String numberOrder = insertOrder(client.getId());                ArrayList<ProductNode> products = client.getProducts();                for (ProductNode p : products) {                    String idProduct = insertProduct(p);                    String res = insertProductsOfOrder(idProduct, numberOrder);                    if (res.equals("Fault"))                        show("Товар № "+p.getId()+" не был добавлен");                    else show("Товар № "+p.getId()+" был добавлен");                    ArrayList<OptionLeaf> options = p.getOptions();                    for (OptionLeaf opt : options) {                        String resOpt = insertOption(opt, idProduct);                        if (resOpt.equals("Fault"))                            show("Опцию "+opt.getName()+" не удалось добавить");                        else show("Опция "+opt.getName()+" была добавлена");                    }                }                if (numberOrder.equals("Fault")) {                    show("Добавить заказ не удалось");                } else                    show("Заказ добавлен");            }            private String insertOrder(String id) {                JSONResult.Parameter params[] = initParams(1);                params[0].name = "IdClient";                params[0].value = id;                return submit(params, SITE_URL+"insertOrder.php");            }            private String insertProduct(ProductNode product) {                JSONResult.Parameter params[] = initParams(4);                params[0].name = "Quantity";                params[0].value = String.valueOf(product.getQuantity());                params[1].name = "IsInstalled";                params[1].value = (product.isInstalled()) ? "1" : "0";                params[2].name = "IdProductItem";                params[2].value = product.getId();                params[3].name = "Price";                params[3].value = String.valueOf(product.getFullPrice());                return submit(params, SITE_URL+"insertProduct.php");            }            private String insertProductsOfOrder(String idProduct, String idOrder) {                JSONResult.Parameter params[] = initParams(2);                params[0].name = "Number";                params[0].value = idOrder;                params[1].name = "IdProduct";                params[1].value = idProduct;                return submit(params, SITE_URL+"insertProductsOfOrder.php");            }            private String insertOption(OptionLeaf option, String id) {                JSONResult.Parameter params[] = initParams(3);                params[0].name = "OptionName";                params[0].value = option.getName();                params[1].name = "Value";                params[1].value = option.getValue();                params[2].name = "IdProduct";                params[2].value = id;                return submit(params, SITE_URL+"insertOption.php");            }            private JSONResult.Parameter[] initParams(int n) {                JSONResult.Parameter params[] = new JSONResult.Parameter[n];                for (int i=0; i<params.length; i++)                    params[i] = new JSONResult.Parameter();                return  params;            }        }    }}